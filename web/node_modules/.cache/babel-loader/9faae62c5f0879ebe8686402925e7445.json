{"ast":null,"code":"import _slicedToArray from \"/home/isaac/www/consumesGithubApi/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/isaac/www/consumesGithubApi/src/pages/Repository/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\nimport Container from '../../components/container';\nimport { Loading } from './styles';\nexport default class Repository extends Component {\n  constructor(...args) {\n    super(...args);\n    this.PropTypes = {\n      match: PropTypes.shape({\n        params: PropTypes.shape({\n          repository: PropTypes.string\n        })\n      }).isRequired\n    };\n    this.state = {\n      repository: {},\n      issues: [],\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    const match = this.props.match;\n    const repoName = decodeURIComponent(match.params.repository);\n\n    const _ref = await Promise.all([api.get(\"/repos/\".concat(repoName)), api.get(\"/repos/\".concat(repoName, \"/issues\"), {\n      params: {\n        state: 'open',\n        per_page: 5\n      }\n    })]),\n          _ref2 = _slicedToArray(_ref, 2),\n          repository = _ref2[0],\n          issues = _ref2[1];\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          repository = _this$state.repository,\n          issues = _this$state.issues,\n          loading = _this$state.loading;\n\n    if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Carregando\");\n    }\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Repositor\");\n  }\n\n}","map":{"version":3,"sources":["/home/isaac/www/consumesGithubApi/src/pages/Repository/index.js"],"names":["React","Component","PropTypes","api","Container","Loading","Repository","match","shape","params","repository","string","isRequired","state","issues","loading","componentDidMount","props","repoName","decodeURIComponent","Promise","all","get","per_page","setState","data","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,OAAT,QAAwB,UAAxB;AAEA,eAAe,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAChDC,SADgD,GACpC;AACVK,MAAAA,KAAK,EAAEL,SAAS,CAACM,KAAV,CAAgB;AACrBC,QAAAA,MAAM,EAAEP,SAAS,CAACM,KAAV,CAAgB;AACtBE,UAAAA,UAAU,EAAER,SAAS,CAACS;AADA,SAAhB;AADa,OAAhB,EAIJC;AALO,KADoC;AAAA,SAShDC,KATgD,GASxC;AACNH,MAAAA,UAAU,EAAE,EADN;AAENI,MAAAA,MAAM,EAAE,EAFF;AAGNC,MAAAA,OAAO,EAAE;AAHH,KATwC;AAAA;;AAehD,QAAMC,iBAAN,GAA0B;AAAA,UAChBT,KADgB,GACN,KAAKU,KADC,CAChBV,KADgB;AAGxB,UAAMW,QAAQ,GAAGC,kBAAkB,CAACZ,KAAK,CAACE,MAAN,CAAaC,UAAd,CAAnC;;AAHwB,iBAKK,MAAMU,OAAO,CAACC,GAAR,CAAY,CAC7ClB,GAAG,CAACmB,GAAJ,kBAAkBJ,QAAlB,EAD6C,EAE7Cf,GAAG,CAACmB,GAAJ,kBAAkBJ,QAAlB,cAAqC;AACnCT,MAAAA,MAAM,EAAE;AACNI,QAAAA,KAAK,EAAE,MADD;AAENU,QAAAA,QAAQ,EAAE;AAFJ;AAD2B,KAArC,CAF6C,CAAZ,CALX;AAAA;AAAA,UAKjBb,UALiB;AAAA,UAKLI,MALK;;AAexB,SAAKU,QAAL,CAAc;AACZd,MAAAA,UAAU,EAAEA,UAAU,CAACe,IADX;AAEZX,MAAAA,MAAM,EAAEA,MAAM,CAACW,IAFH;AAGZV,MAAAA,OAAO,EAAE;AAHG,KAAd;AAKD;;AAEDW,EAAAA,MAAM,GAAG;AAAA,wBACiC,KAAKb,KADtC;AAAA,UACCH,UADD,eACCA,UADD;AAAA,UACaI,MADb,eACaA,MADb;AAAA,UACqBC,OADrB,eACqBA,OADrB;;AAGP,QAAIA,OAAJ,EAAa;AACX,aAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AAED,WAAO,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACD;;AA7C+C","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\n\nimport Container from '../../components/container';\nimport { Loading } from './styles';\n\nexport default class Repository extends Component {\n  PropTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({\n        repository: PropTypes.string,\n      }),\n    }).isRequired,\n  };\n\n  state = {\n    repository: {},\n    issues: [],\n    loading: true,\n  };\n\n  async componentDidMount() {\n    const { match } = this.props;\n\n    const repoName = decodeURIComponent(match.params.repository);\n\n    const [repository, issues] = await Promise.all([\n      api.get(`/repos/${repoName}`),\n      api.get(`/repos/${repoName}/issues`, {\n        params: {\n          state: 'open',\n          per_page: 5,\n        },\n      }),\n    ]);\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { repository, issues, loading } = this.state;\n\n    if (loading) {\n      return <Loading>Carregando</Loading>;\n    }\n\n    return <Container>Repositor</Container>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}